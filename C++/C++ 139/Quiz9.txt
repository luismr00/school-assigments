// ************************************************************************************************************************************ //
//																																		//
//  This program was mainly focused on learning how to use pointers. Especifically how to use new and delete methods for pointers.	    //
//  The program is not utilizing strings in this case even though it would have been easier. If you need to come back to re-learn	    //
//  pointers, focus on the main section instead of the functions themselves. This will remind you how to use pointers. The rest		    //
//  of the code are practices that you are already familiar with which you do not need any further practice.						    //
//																																		//
//************************************************************************************************************************************* //

#include <iostream>

using namespace std;

void appendChars(char*, char*, int); //this will be used to copy our pointers back and forth
void LowerCaseVowels(char*, int);
void UpperCaseVowerls(char*, int);

int main() {

	int ptrSIZE = 1; //if your giving an array an actual size to use before declaring it, it needs to have a size of at least 1
	char aChar;

	char *ptr1 = nullptr;
	char *ptr2 = nullptr;

	cout << "Enter a string: ";
	aChar = cin.get();  //cin.get() is getting the users input into aChar

	//the "10" in the condition below means that it will the end of the user's input when using cin.get()
	while (aChar != 10) { 

		if (ptrSIZE == 1) {
			ptr1 = new char[ptrSIZE]; //pointer will now point to a new allocated memory array of type char
			ptr1[ptrSIZE - 1] = aChar; //have to decrease ptrSIZE by ONE in order to account index 0 while adding the current char to the ptr array
			ptrSIZE++;
		}
		else if (ptrSIZE % 2 == 1) {
			cin.get(aChar); //cin.get(aChar) is getting the next character within the input
			ptr1 = new char[ptrSIZE];
			appendChars(ptr2, ptr1, ptrSIZE); //duplicate pointers 
			ptr1[ptrSIZE - 1] = aChar; //add the next aChar character to our new allocated pointer
			delete[] ptr2; //deleting ptr2 for next use for future fresh start use
			char *ptr2 = nullptr;
			ptrSIZE++;
		}
		else if (ptrSIZE % 2 == 0) {

			cin.get(aChar);
			ptr2 = new char[ptrSIZE];
			appendChars(ptr1, ptr2, ptrSIZE);
			ptr2[ptrSIZE - 1] = aChar;
			delete[] ptr1;
			char *ptr1 = nullptr;
			ptrSIZE++;
		}
	}

	//The ptrSIZE here is tricky at first to determine which ptr to pass as a paramater. Although, remember that you added an extra
	//ptrSIZE toward the end of the conditional statements above. That's why the below code seems reversed as far as determining 
	//which ptr you actually need to ACTUALLY pass as a parameter.

	if (ptrSIZE % 2 == 0) {
		LowerCaseVowels(ptr1, ptrSIZE);
		UpperCaseVowerls(ptr1, ptrSIZE);
	}
	else if (ptrSIZE % 2 == 1) {
		LowerCaseVowels(ptr2, ptrSIZE);
		UpperCaseVowerls(ptr2, ptrSIZE);
	}


	return 0;
}

void appendChars(char *oldPtr, char *newPtr, int ptrSIZE) {

	for (int i = 0; i < ptrSIZE - 1; i++) {
		newPtr[i] = oldPtr[i];
	}
}

void LowerCaseVowels(char* ptrArray, int ptrSIZE) {

	const int arraySize = 5;
	char vowels[arraySize] = {'a','e','i','o','u'};
	int frequencyCount[arraySize];
	char vowel;
	char frequentVowel;
	int count = 0;
	int highestFrequencyCount = 0;
	int repeatedFrequency = 0;


	for (int i = 0; i < arraySize; i++) {
		
		vowel = vowels[i];

		for (int j = 0; j < ptrSIZE - 1; j++) {

			if (vowel == ptrArray[j]) {
				count++;
			}
		}

		frequencyCount[i] = count;
		
		if (count > highestFrequencyCount && count != 0) {
			highestFrequencyCount = count;
			repeatedFrequency = 0; //restart the repeatedFrequency counter for next vowel checking
			frequentVowel = vowel;

		}

		if (count == highestFrequencyCount && count != 0) {
			repeatedFrequency++;
		}

		count = 0;
	}

	//if there are vowels with the same frequency

	if (highestFrequencyCount != 0) {

		cout << "The lower - case vowels which are present are: ";

		for (int k = 0; k < arraySize; k++) {
			if (frequencyCount[k] != 0) {
				cout << vowels[k];
				cout << "(";
				cout << frequencyCount[k];
				cout << ") ";
			}
		}
		cout << endl;
	}


	if (repeatedFrequency == 1) {
		cout << "The highest frequency lower case vowel is ";
		cout << frequentVowel;
		cout << " with a frequency of ";
		cout << highestFrequencyCount << endl;
	}
	else {
		cout << "There is no highest frequency lower case vowel" << endl;
	}

}

void UpperCaseVowerls(char* ptrArray, int ptrSIZE) {
	const int arraySize = 5;
	char vowels[arraySize] = { 'A','E','I','O','U' };
	int frequencyCount[arraySize];
	char vowel;
	char frequentVowel;
	int count = 0;
	int highestFrequencyCount = 0;
	int repeatedFrequency = 0;


	for (int i = 0; i < arraySize; i++) {

		vowel = vowels[i];

		for (int j = 0; j < ptrSIZE - 1; j++) {

			if (vowel == ptrArray[j]) {
				count++;
			}
		}

		frequencyCount[i] = count;

		if (count > highestFrequencyCount && count != 0) {
			highestFrequencyCount = count;
			repeatedFrequency = 0; //restart the repeatedFrequency counter for next vowel checking
			frequentVowel = vowel;

		}

		if (count == highestFrequencyCount && count != 0) {
			repeatedFrequency++;
		}

		count = 0;
	}

	//if there are vowels with the same frequency

	if (highestFrequencyCount != 0) {

		cout << "The lower - case vowels which are present are: ";

		for (int k = 0; k < arraySize; k++) {
			if (frequencyCount[k] != 0) {
				cout << vowels[k];
				cout << "(";
				cout << frequencyCount[k];
				cout << ") ";
			}
		}
		cout << endl;
	}

	if (repeatedFrequency == 1) {
		cout << "The highest frequency upper case vowel is ";
		cout << frequentVowel;
		cout << " with a frequency of ";
		cout << highestFrequencyCount << endl;
	}
	else {
		cout << "There is no highest frequency upper case vowel" << endl;
	}

}



